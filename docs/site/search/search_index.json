{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>concord232: Core library for interfacing with GE Concord 4 alarm panels via RS232.</p> <p>Flask API for the concord232 server. Provides endpoints for panel, zones, partitions, commands, version, equipment, and all_data.</p>"},{"location":"api/#concord232.api.command","title":"<code>command()</code>","text":"<p>API endpoint to send commands (arm, disarm, keys) to the panel. Returns:     flask.Response: Empty response.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/command')\ndef command():\n    \"\"\"\n    API endpoint to send commands (arm, disarm, keys) to the panel.\n    Returns:\n        flask.Response: Empty response.\n    \"\"\"\n    args = flask.request.args\n    if args.get('cmd') == 'arm':\n        option = args.get('option')\n        if args.get('level') == 'stay':\n            CONTROLLER.arm_stay(option)\n        elif args.get('level') == 'away':\n            CONTROLLER.arm_away(option)\n    elif args.get('cmd') == 'disarm':\n        CONTROLLER.disarm(args.get('master_pin'))\n    elif args.get('cmd') == 'keys':\n        partition = int(args.get('partition', 1))\n        CONTROLLER.send_keys(args.get('keys'), args.get('group'), partition=partition)\n    return flask.Response()\n</code></pre>"},{"location":"api/#concord232.api.get_all_data","title":"<code>get_all_data()</code>","text":"<p>API endpoint to request a dynamic data refresh from the panel. Returns:     flask.Response: Empty response.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/all_data')\ndef get_all_data():\n    \"\"\"\n    API endpoint to request a dynamic data refresh from the panel.\n    Returns:\n        flask.Response: Empty response.\n    \"\"\"\n    CONTROLLER.request_dynamic_data_refresh()\n    return flask.Response()    \n</code></pre>"},{"location":"api/#concord232.api.get_equipment","title":"<code>get_equipment()</code>","text":"<p>API endpoint to request all equipment data from the panel. Returns:     flask.Response: Empty response.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/equipment')\ndef get_equipment():\n    \"\"\"\n    API endpoint to request all equipment data from the panel.\n    Returns:\n        flask.Response: Empty response.\n    \"\"\"\n    CONTROLLER.request_all_equipment()\n    return flask.Response()    \n</code></pre>"},{"location":"api/#concord232.api.get_version","title":"<code>get_version()</code>","text":"<p>API endpoint to get the API version. Returns:     flask.Response: JSON response with version info.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/version')\ndef get_version():\n    \"\"\"\n    API endpoint to get the API version.\n    Returns:\n        flask.Response: JSON response with version info.\n    \"\"\"\n    return flask.Response(json.dumps({'version': '1.1'}),\n                          mimetype='application/json')\n</code></pre>"},{"location":"api/#concord232.api.index_panel","title":"<code>index_panel()</code>","text":"<p>API endpoint to get the panel state. Returns:     flask.Response: JSON response with panel state.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/panel')\ndef index_panel():\n    \"\"\"\n    API endpoint to get the panel state.\n    Returns:\n        flask.Response: JSON response with panel state.\n    \"\"\"\n    try:\n        result = json.dumps({\n            'panel': CONTROLLER.panel\n            })\n        return flask.Response(result,\n                              mimetype='application/json')\n    except Exception:\n        LOG.exception('Failed to index zones')\n</code></pre>"},{"location":"api/#concord232.api.index_partitions","title":"<code>index_partitions()</code>","text":"<p>API endpoint to get all partitions. Returns:     flask.Response: JSON response with all partitions.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/partitions')\ndef index_partitions():\n    \"\"\"\n    API endpoint to get all partitions.\n    Returns:\n        flask.Response: JSON response with all partitions.\n    \"\"\"\n    try:\n        if not bool(CONTROLLER.partitions):\n            CONTROLLER.request_partitions()\n\n        while not bool(CONTROLLER.partitions):\n            time.sleep(0.25)\n\n        result = json.dumps({\n            'partitions': [show_partition(partition)\n                           for partition in CONTROLLER.partitions.values()]})\n        return flask.Response(result,\n                              mimetype='application/json')\n    except Exception:\n        LOG.exception('Failed to index partitions')\n</code></pre>"},{"location":"api/#concord232.api.index_zones","title":"<code>index_zones()</code>","text":"<p>API endpoint to get all zones. Returns:     flask.Response: JSON response with all zones.</p> Source code in <code>concord232/api.py</code> <pre><code>@app.route('/zones')\ndef index_zones():\n    \"\"\"\n    API endpoint to get all zones.\n    Returns:\n        flask.Response: JSON response with all zones.\n    \"\"\"\n    try:\n        if not bool(CONTROLLER.zones):\n            CONTROLLER.request_zones()\n\n        while not bool(CONTROLLER.zones):\n            time.sleep(0.25)\n\n        result = json.dumps({\n            'zones': [show_zone(zone) for zone in CONTROLLER.zones.values()]})\n        return flask.Response(result,\n                              mimetype='application/json')\n    except Exception:\n        LOG.exception('Failed to index zones')\n</code></pre>"},{"location":"api/#concord232.api.show_partition","title":"<code>show_partition(partition)</code>","text":"<p>Convert a partition dictionary to a JSON-serializable dict for API response. Args:     partition (dict): Partition data. Returns:     dict: JSON-serializable partition info.</p> Source code in <code>concord232/api.py</code> <pre><code>def show_partition(partition):\n    \"\"\"\n    Convert a partition dictionary to a JSON-serializable dict for API response.\n    Args:\n        partition (dict): Partition data.\n    Returns:\n        dict: JSON-serializable partition info.\n    \"\"\"\n    return {\n        'number': partition['partition_number'],\n        'area': partition['area_number'],\n        'arming_level': partition['arming_level'],\n        'arming_level_code': partition['arming_level_code'],\n        'partition_text': partition['partition_text'],\n        'zones': sum(z['partition_number'] == partition['partition_number'] for z in CONTROLLER.zones.values()),\n\n\n    }\n</code></pre>"},{"location":"api/#concord232.api.show_zone","title":"<code>show_zone(zone)</code>","text":"<p>Convert a zone dictionary to a JSON-serializable dict for API response. Args:     zone (dict): Zone data. Returns:     dict: JSON-serializable zone info.</p> Source code in <code>concord232/api.py</code> <pre><code>def show_zone(zone):\n    \"\"\"\n    Convert a zone dictionary to a JSON-serializable dict for API response.\n    Args:\n        zone (dict): Zone data.\n    Returns:\n        dict: JSON-serializable zone info.\n    \"\"\"\n    return {\n        'partition': zone['partition_number'],\n        'area': zone['area_number'],\n        'group': zone['group_number'],\n        'number': zone['zone_number'],\n        'name': zone['zone_text'],\n        'state': zone['zone_state'],\n        'type': zone['zone_type'],\n        #'bypassed': zone.bypassed,\n        #'condition_flags': zone.condition_flags,\n        #'type_flags': zone.type_flags,\n    }\n</code></pre>"},{"location":"api/#partition-support","title":"Partition Support","text":"<p>Many API endpoints support targeting a specific partition using the <code>partition</code> parameter. This is especially relevant for arming, disarming, and sending keypresses.</p>"},{"location":"api/#command-endpoint-with-partition","title":"/command endpoint with partition","text":"<ul> <li>Arm a specific partition:</li> <li><code>/command?cmd=keys&amp;keys=\\x02&amp;group=True&amp;partition=2</code>  (Arm partition 2 to stay)</li> <li>Disarm a specific partition:</li> <li><code>/command?cmd=keys&amp;keys=&lt;PIN&gt;&amp;group=True&amp;partition=3</code>  (Disarm partition 3 with PIN)</li> <li>Send keys to a specific partition:</li> <li><code>/command?cmd=keys&amp;keys=1234*&amp;group=False&amp;partition=4</code></li> </ul> <p>If <code>partition</code> is not specified, partition 1 is used by default.</p> <p>See the main README for more CLI and API usage examples.</p>"}]}